{"ast":null,"code":"var _jsxFileName = \"/Users/kylestrong/WebstormProjects/chatgpt-app/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [value, setValue] = useState(null);\n  const [message, setMessage] = useState(null);\n  const [previousChats, setPreviousChats] = useState([]);\n  const [currentTitle, setCurrentTitle] = useState(null);\n  const createNewChat = () => {\n    setMessage(null);\n    setValue(\"\");\n    setCurrentTitle(null);\n  };\n  const handleClick = uniqueTitle => {\n    setCurrentTitle(uniqueTitle);\n    setMessage(null);\n    setValue(\"\");\n  };\n  const getMessages = async () => {\n    if (value) {\n      try {\n        const options = {\n          method: \"POST\",\n          body: JSON.stringify({\n            message: value\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        };\n        const response = await fetch('http://localhost:8000/completions', options);\n        const data = await response.json();\n        if (data.choices && data.choices.length > 0) {\n          setPreviousChats(previousChats => [...previousChats, {\n            title: currentTitle || value,\n            role: \"user\",\n            content: value\n          }, {\n            title: currentTitle || value,\n            role: data.choices[0].message.role,\n            content: data.choices[0].message.content\n          }]);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  };\n\n  // const getMessages = async () => {\n  //   const options = {\n  //     method:\"POST\",\n  //     body:JSON.stringify({\n  //       message: value\n  //     }),\n  //     headers: {\n  //       \"Content-Type\": \"application/json\"\n  //     }\n  //   }\n  //   try {\n  //     const response = await fetch('http://localhost:8000/completions', options)\n  //     const data = await response.json()\n  //     setMessage(data.choices[0].message)\n  //   }catch(error){\n  //     console.error(error)\n  //   }\n  // }\n\n  // useEffect(() => {\n  //   console.log(currentTitle, value, message)\n  //   if(!currentTitle && value && message) {\n  //     setCurrentTitle((value))\n  //   }\n  //   if (currentTitle && value && message) {\n  //   setPreviousChats(previousChats => (\n  //       [...previousChats,\n  //         {\n  //           title: currentTitle,\n  //           role: \"user\",\n  //           content: value\n  //         },\n  //         {\n  //           title: currentTitle,\n  //           role: message.role,\n  //           content: message.content\n  //         }]\n  //   ))\n  //   }\n  // }, [message, currentTitle, value]);\n\n  useEffect(() => {\n    console.log(currentTitle, value, message);\n    if (!currentTitle && value && message) {\n      setCurrentTitle(value);\n    }\n    if (currentTitle && value && message) {\n      setPreviousChats(previousChats => [...previousChats, {\n        title: currentTitle,\n        role: \"user\",\n        content: value\n      }, {\n        title: currentTitle,\n        role: message.role,\n        content: message.content\n      }]);\n    }\n  }, [message, currentTitle, value]);\n  console.log(previousChats);\n  const currentChat = previousChats.filter(previousChat => previousChat.title === currentTitle);\n  const uniqueTitles = Array.from(new Set(previousChats.map(previousChat => previousChat.title)));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"side-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createNewChat,\n        children: \"+ New Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"history\",\n        children: uniqueTitles === null || uniqueTitles === void 0 ? void 0 : uniqueTitles.map((uniqueTitle, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleClick(uniqueTitle),\n          children: uniqueTitle\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 52\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Made by Kyle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"main\",\n      children: [!currentTitle && /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"KyleGPT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 27\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"feed\",\n        children: currentChat === null || currentChat === void 0 ? void 0 : currentChat.map((chatMessage, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"role\",\n            children: chatMessage.role\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: chatMessage.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 53\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottom-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            value: value,\n            onChange: e => setValue(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"submit\",\n            onClick: getMessages,\n            children: \"\\u27A2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"info\",\n          children: \"ChatGPT Oct 23 Version. Free Research Preview. Our goal is to make AI systems more natural and safe to interact with. Your feedback will help us improve.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"qJeY4W37zrvSdXp+7Ub3hbOhwqk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","App","_s","value","setValue","message","setMessage","previousChats","setPreviousChats","currentTitle","setCurrentTitle","createNewChat","handleClick","uniqueTitle","getMessages","options","method","body","JSON","stringify","headers","response","fetch","data","json","choices","length","title","role","content","error","console","log","currentChat","filter","previousChat","uniqueTitles","Array","from","Set","map","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","index","chatMessage","onChange","e","target","id","_c","$RefreshReg$"],"sources":["/Users/kylestrong/WebstormProjects/chatgpt-app/src/App.js"],"sourcesContent":["import { useState, useEffect} from \"react\";\n\nconst App = ()  => {\n  const [ value, setValue] = useState(null)\n  const [ message, setMessage ] = useState(null)\n  const [ previousChats, setPreviousChats ] = useState([])\n  const [ currentTitle, setCurrentTitle ] = useState(null)\n\n  const createNewChat = () => {\n    setMessage(null)\n    setValue(\"\")\n    setCurrentTitle(null)\n  }\n\n  const handleClick = (uniqueTitle) => {\n    setCurrentTitle(uniqueTitle)\n    setMessage(null)\n    setValue(\"\")\n  }\n\n  const getMessages = async () => {\n    if (value) {\n      try {\n        const options = {\n          method: \"POST\",\n          body: JSON.stringify({\n            message: value\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        };\n\n        const response = await fetch('http://localhost:8000/completions', options);\n        const data = await response.json();\n\n        if (data.choices && data.choices.length > 0) {\n          setPreviousChats(previousChats => ([\n            ...previousChats,\n            {\n              title: currentTitle || value,\n              role: \"user\",\n              content: value\n            },\n            {\n              title: currentTitle || value,\n              role: data.choices[0].message.role,\n              content: data.choices[0].message.content\n            }\n          ]));\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  };\n\n  // const getMessages = async () => {\n  //   const options = {\n  //     method:\"POST\",\n  //     body:JSON.stringify({\n  //       message: value\n  //     }),\n  //     headers: {\n  //       \"Content-Type\": \"application/json\"\n  //     }\n  //   }\n  //   try {\n  //     const response = await fetch('http://localhost:8000/completions', options)\n  //     const data = await response.json()\n  //     setMessage(data.choices[0].message)\n  //   }catch(error){\n  //     console.error(error)\n  //   }\n  // }\n\n  // useEffect(() => {\n  //   console.log(currentTitle, value, message)\n  //   if(!currentTitle && value && message) {\n  //     setCurrentTitle((value))\n  //   }\n  //   if (currentTitle && value && message) {\n  //   setPreviousChats(previousChats => (\n  //       [...previousChats,\n  //         {\n  //           title: currentTitle,\n  //           role: \"user\",\n  //           content: value\n  //         },\n  //         {\n  //           title: currentTitle,\n  //           role: message.role,\n  //           content: message.content\n  //         }]\n  //   ))\n  //   }\n  // }, [message, currentTitle, value]);\n\n  useEffect(() => {\n    console.log(currentTitle, value, message)\n    if(!currentTitle && value && message) {\n          setCurrentTitle((value))\n        }\n    if (currentTitle && value && message) {\n      setPreviousChats(previousChats => (\n          [...previousChats,\n            {\n              title: currentTitle,\n              role: \"user\",\n              content: value\n            },\n            {\n              title: currentTitle,\n              role: message.role,\n              content: message.content\n            }]\n      ))\n    }\n  }, [message, currentTitle, value]);\n\n  console.log(previousChats)\n\n  const currentChat = previousChats.filter(previousChat => previousChat.title === currentTitle)\n  const uniqueTitles = Array.from(new Set(previousChats.map(previousChat => previousChat.title)))\n\n  return (\n    <div className=\"app\">\n    <section className=\"side-bar\">\n      <button onClick={createNewChat}>+ New Chat</button>\n      <ul className=\"history\">\n        {uniqueTitles?.map((uniqueTitle, index) => <li key={index} onClick={() =>handleClick(uniqueTitle)}>{uniqueTitle}</li>)}\n      </ul>\n      <nav>\n        <p>Made by Kyle</p>\n      </nav>\n    </section>\n      <section className=\"main\">\n        {!currentTitle && <h1>KyleGPT</h1>}\n        <ul className=\"feed\">\n          {currentChat?.map((chatMessage, index) => <li key={index}>\n              <p className=\"role\">{chatMessage.role}</p>\n              <p>{chatMessage.content}</p>\n          </li>)}\n        </ul>\n        <div className=\"bottom-section\">\n          <div className=\"input-container\">\n            <input value={value} onChange={(e ) => setValue(e.target.value)}/>\n            <div id=\"submit\" onClick={getMessages}>➢</div>\n          </div>\n          <p className=\"info\">\n            ChatGPT Oct 23 Version. Free Research Preview.\n            Our goal is to make AI systems more natural and safe to interact with.\n            Your feedback will help us improve.\n          </p>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}