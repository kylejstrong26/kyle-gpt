{"ast":null,"code":"var _jsxFileName = \"/Users/kylestrong/WebstormProjects/chatgpt-app/src/App.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect} from \"react\";\n//\n// const App = ()  => {\n//   const [ value, setValue] = useState(null)\n//   const [ message, setMessage ] = useState(null)\n//   const [ previousChats, setPreviousChats ] = useState([])\n//   const [ currentTitle, setCurrentTitle ] = useState(null)\n//\n//   const createNewChat = () => {\n//     setMessage(null)\n//     setValue(\"\")\n//     setCurrentTitle(null)\n//   }\n//\n//   const handleClick = (uniqueTitle) => {\n//     setCurrentTitle(uniqueTitle)\n//     setMessage(null)\n//     setValue(\"\")\n//   }\n//\n//   const getMessages = async () => {\n//     const options = {\n//       method:\"POST\",\n//       body:JSON.stringify({\n//         message: value\n//       }),\n//       headers: {\n//         \"Content-Type\": \"application/json\"\n//       }\n//     }\n//     try {\n//       const response = await fetch('http://localhost:8000/completions', options)\n//       const data = await response.json()\n//       setMessage(data.choices[0].message)\n//     }catch(error){\n//       console.error(error)\n//     }\n//   }\n//\n//   useEffect(() => {\n//     // console.log(currentTitle, value, message)\n//     if(!currentTitle && value && message) {\n//       setCurrentTitle((value))\n//     }\n//     if (currentTitle && value && message) {\n//     setPreviousChats(previousChats => (\n//         [...previousChats,\n//           {\n//             title: currentTitle,\n//             role: \"user\",\n//             content: value\n//           },\n//           {\n//             title: currentTitle,\n//             role: message.role,\n//             content: message.content\n//           }]\n//     ))\n//     }\n//   }, [message, currentTitle, value]);\n//\n//   console.log(previousChats)\n//\n//   const currentChat = previousChats.filter(previousChat => previousChat.title === currentTitle)\n//   const uniqueTitles = Array.from(new Set(previousChats.map(previousChat => previousChat.title)))\n//\n//   return (\n//     <div className=\"app\">\n//     <section className=\"side-bar\">\n//       <button onClick={createNewChat}>+ New Chat</button>\n//       <ul className=\"history\">\n//         {uniqueTitles?.map((uniqueTitle, index) => <li key={index} onClick={() =>handleClick(uniqueTitle)}>{uniqueTitle}</li>)}\n//       </ul>\n//       <nav>\n//         <p>Made by Kyle</p>\n//       </nav>\n//     </section>\n//       <section className=\"main\">\n//         {!currentTitle && <h1>KyleGPT</h1>}\n//         <ul className=\"feed\">\n//           {currentChat?.map((chatMessage, index) => <li key={index}>\n//               <p className=\"role\">{chatMessage.role}</p>\n//               <p>{chatMessage.content}</p>\n//           </li>)}\n//         </ul>\n//         <div className=\"bottom-section\">\n//           <div className=\"input-container\">\n//             <input value={value} onChange={(e ) => setValue(e.target.value)}/>\n//             <div id=\"submit\" onClick={getMessages}>âž¢</div>\n//           </div>\n//           <p className=\"info\">\n//             ChatGPT Oct 23 Version. Free Research Preview.\n//             Our goal is to make AI systems more natural and safe to interact with.\n//             Your feedback will help us improve.\n//           </p>\n//         </div>\n//       </section>\n//     </div>\n//   );\n// }\n//\n// export default App;\n\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [value, setValue] = useState(null);\n  const [message, setMessage] = useState(null);\n  const [previousChats, setPreviousChats] = useState([]);\n  const [currentTitle, setCurrentTitle] = useState(null);\n  const createNewChat = () => {\n    setMessage(null);\n    setValue(\"\");\n    setCurrentTitle(null);\n  };\n  const handleClick = uniqueTitle => {\n    setCurrentTitle(uniqueTitle);\n    setMessage(null);\n    setValue(\"\");\n  };\n  const getMessages = async () => {\n    const options = {\n      method: \"POST\",\n      body: JSON.stringify({\n        message: value\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    try {\n      const response = await fetch(\"http://localhost:8000/completions\", options);\n      const data = await response.json();\n      setMessage(data.choices[0].message);\n\n      // Move the state updates here\n      setPreviousChats(previousChats => [...previousChats, {\n        title: currentTitle,\n        role: \"user\",\n        content: value\n      }, {\n        title: currentTitle,\n        role: message.role || \"\",\n        // Handle the case where message.role is null\n        content: message.content || \"\" // Handle the case where message.content is null\n      }]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  useEffect(() => {\n    if (!currentTitle && value && message) {\n      setCurrentTitle(value);\n    }\n    if (currentTitle && value && message) {\n      const userMessage = {\n        title: currentTitle,\n        role: \"user\",\n        content: value\n      };\n      const responseMessage = {\n        title: currentTitle,\n        role: message.role || \"\",\n        content: message.content || \"\"\n      };\n      setPreviousChats(previousChats => [...previousChats, userMessage, responseMessage]);\n    }\n  }, [message, currentTitle, value]);\n  const currentChat = previousChats.filter(previousChat => previousChat.title === currentTitle);\n  const uniqueTitles = Array.from(new Set(previousChats.map(previousChat => previousChat.title)));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"side-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createNewChat,\n        children: \"+ New Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"history\",\n        children: uniqueTitles === null || uniqueTitles === void 0 ? void 0 : uniqueTitles.map((uniqueTitle, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleClick(uniqueTitle),\n          children: uniqueTitle\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Made by Kyle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"main\",\n      children: [!currentTitle && /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"KyleGPT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"feed\",\n        children: currentChat === null || currentChat === void 0 ? void 0 : currentChat.map((chatMessage, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"role\",\n            children: chatMessage.role\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: chatMessage.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottom-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            value: value,\n            onChange: e => setValue(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"submit\",\n            onClick: getMessages,\n            children: \"\\u27A2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"info\",\n          children: \"ChatGPT Oct 23 Version. Free Research Preview. Our goal is to make AI systems more natural and safe to interact with. Your feedback will help us improve.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 7\n  }, this);\n};\n_s(App, \"9WYKqOll1nj2EK2vvXRqQ0Y7iCY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","App","_s","value","setValue","message","setMessage","previousChats","setPreviousChats","currentTitle","setCurrentTitle","createNewChat","handleClick","uniqueTitle","getMessages","options","method","body","JSON","stringify","headers","response","fetch","data","json","choices","title","role","content","error","console","userMessage","responseMessage","currentChat","filter","previousChat","uniqueTitles","Array","from","Set","map","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","index","chatMessage","onChange","e","target","id","_c","$RefreshReg$"],"sources":["/Users/kylestrong/WebstormProjects/chatgpt-app/src/App.js"],"sourcesContent":["// import { useState, useEffect} from \"react\";\n//\n// const App = ()  => {\n//   const [ value, setValue] = useState(null)\n//   const [ message, setMessage ] = useState(null)\n//   const [ previousChats, setPreviousChats ] = useState([])\n//   const [ currentTitle, setCurrentTitle ] = useState(null)\n//\n//   const createNewChat = () => {\n//     setMessage(null)\n//     setValue(\"\")\n//     setCurrentTitle(null)\n//   }\n//\n//   const handleClick = (uniqueTitle) => {\n//     setCurrentTitle(uniqueTitle)\n//     setMessage(null)\n//     setValue(\"\")\n//   }\n//\n//   const getMessages = async () => {\n//     const options = {\n//       method:\"POST\",\n//       body:JSON.stringify({\n//         message: value\n//       }),\n//       headers: {\n//         \"Content-Type\": \"application/json\"\n//       }\n//     }\n//     try {\n//       const response = await fetch('http://localhost:8000/completions', options)\n//       const data = await response.json()\n//       setMessage(data.choices[0].message)\n//     }catch(error){\n//       console.error(error)\n//     }\n//   }\n//\n//   useEffect(() => {\n//     // console.log(currentTitle, value, message)\n//     if(!currentTitle && value && message) {\n//       setCurrentTitle((value))\n//     }\n//     if (currentTitle && value && message) {\n//     setPreviousChats(previousChats => (\n//         [...previousChats,\n//           {\n//             title: currentTitle,\n//             role: \"user\",\n//             content: value\n//           },\n//           {\n//             title: currentTitle,\n//             role: message.role,\n//             content: message.content\n//           }]\n//     ))\n//     }\n//   }, [message, currentTitle, value]);\n//\n//   console.log(previousChats)\n//\n//   const currentChat = previousChats.filter(previousChat => previousChat.title === currentTitle)\n//   const uniqueTitles = Array.from(new Set(previousChats.map(previousChat => previousChat.title)))\n//\n//   return (\n//     <div className=\"app\">\n//     <section className=\"side-bar\">\n//       <button onClick={createNewChat}>+ New Chat</button>\n//       <ul className=\"history\">\n//         {uniqueTitles?.map((uniqueTitle, index) => <li key={index} onClick={() =>handleClick(uniqueTitle)}>{uniqueTitle}</li>)}\n//       </ul>\n//       <nav>\n//         <p>Made by Kyle</p>\n//       </nav>\n//     </section>\n//       <section className=\"main\">\n//         {!currentTitle && <h1>KyleGPT</h1>}\n//         <ul className=\"feed\">\n//           {currentChat?.map((chatMessage, index) => <li key={index}>\n//               <p className=\"role\">{chatMessage.role}</p>\n//               <p>{chatMessage.content}</p>\n//           </li>)}\n//         </ul>\n//         <div className=\"bottom-section\">\n//           <div className=\"input-container\">\n//             <input value={value} onChange={(e ) => setValue(e.target.value)}/>\n//             <div id=\"submit\" onClick={getMessages}>âž¢</div>\n//           </div>\n//           <p className=\"info\">\n//             ChatGPT Oct 23 Version. Free Research Preview.\n//             Our goal is to make AI systems more natural and safe to interact with.\n//             Your feedback will help us improve.\n//           </p>\n//         </div>\n//       </section>\n//     </div>\n//   );\n// }\n//\n// export default App;\n\n\nimport { useState, useEffect } from \"react\";\n\nconst App = () => {\n  const [value, setValue] = useState(null);\n  const [message, setMessage] = useState(null);\n  const [previousChats, setPreviousChats] = useState([]);\n  const [currentTitle, setCurrentTitle] = useState(null);\n\n  const createNewChat = () => {\n    setMessage(null);\n    setValue(\"\");\n    setCurrentTitle(null);\n  };\n\n  const handleClick = (uniqueTitle) => {\n    setCurrentTitle(uniqueTitle);\n    setMessage(null);\n    setValue(\"\");\n  };\n\n  const getMessages = async () => {\n    const options = {\n      method: \"POST\",\n      body: JSON.stringify({\n        message: value,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    try {\n      const response = await fetch(\"http://localhost:8000/completions\", options);\n      const data = await response.json();\n      setMessage(data.choices[0].message);\n\n      // Move the state updates here\n      setPreviousChats((previousChats) => [\n        ...previousChats,\n        {\n          title: currentTitle,\n          role: \"user\",\n          content: value,\n        },\n        {\n          title: currentTitle,\n          role: message.role || \"\", // Handle the case where message.role is null\n          content: message.content || \"\" // Handle the case where message.content is null\n        },\n      ]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    if (!currentTitle && value && message) {\n      setCurrentTitle(value);\n    }\n    if (currentTitle && value && message) {\n      const userMessage = {\n        title: currentTitle,\n        role: \"user\",\n        content: value,\n      };\n\n      const responseMessage = {\n        title: currentTitle,\n        role: message.role || \"\",\n        content: message.content || \"\",\n      };\n\n      setPreviousChats((previousChats) => [\n        ...previousChats,\n        userMessage,\n        responseMessage,\n      ]);\n    }\n  }, [message, currentTitle, value]);\n\n\n  const currentChat = previousChats.filter((previousChat) => previousChat.title === currentTitle);\n  const uniqueTitles = Array.from(new Set(previousChats.map((previousChat) => previousChat.title)));\n\n  return (\n      <div className=\"app\">\n        <section className=\"side-bar\">\n          <button onClick={createNewChat}>+ New Chat</button>\n          <ul className=\"history\">\n            {uniqueTitles?.map((uniqueTitle, index) => (\n                <li key={index} onClick={() => handleClick(uniqueTitle)}>\n                  {uniqueTitle}\n                </li>\n            ))}\n          </ul>\n          <nav>\n            <p>Made by Kyle</p>\n          </nav>\n        </section>\n        <section className=\"main\">\n          {!currentTitle && <h1>KyleGPT</h1>}\n          <ul className=\"feed\">\n            {currentChat?.map((chatMessage, index) => (\n                <li key={index}>\n                  <p className=\"role\">{chatMessage.role}</p>\n                  <p>{chatMessage.content}</p>\n                </li>\n            ))}\n          </ul>\n          <div className=\"bottom-section\">\n            <div className=\"input-container\">\n              <input value={value} onChange={(e) => setValue(e.target.value)} />\n              <div id=\"submit\" onClick={getMessages}>\n                âž¢\n              </div>\n            </div>\n            <p className=\"info\">\n              ChatGPT Oct 23 Version. Free Research Preview.\n              Our goal is to make AI systems more natural and safe to interact with.\n              Your feedback will help us improve.\n            </p>\n          </div>\n        </section>\n      </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAEtD,MAAMc,aAAa,GAAGA,CAAA,KAAM;IAC1BL,UAAU,CAAC,IAAI,CAAC;IAChBF,QAAQ,CAAC,EAAE,CAAC;IACZM,eAAe,CAAC,IAAI,CAAC;EACvB,CAAC;EAED,MAAME,WAAW,GAAIC,WAAW,IAAK;IACnCH,eAAe,CAACG,WAAW,CAAC;IAC5BP,UAAU,CAAC,IAAI,CAAC;IAChBF,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC;EAED,MAAMU,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,MAAMC,OAAO,GAAG;MACdC,MAAM,EAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}